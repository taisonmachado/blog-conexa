<?php

/**
 * This is the model base class for the table "comentario".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Comentario".
 *
 * Columns in table "comentario" available as properties of the model,
 * followed by relations of table "comentario" available as properties of the model.
 *
 * @property integer $comentario_id
 * @property string $texto
 * @property string $data
 * @property integer $usuario_id
 * @property integer $post_id
 * @property string $cadastrado
 * @property string $atualizado
 *
 * @property Usuario $usuario
 * @property Post $post
 */
abstract class BaseComentario extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'comentario';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Comentario|Comentarios', $n);
	}

	public static function representingColumn() {
		return 'texto';
	}

	public function rules() {
		return array(
			array('texto', 'required'),
			array('usuario_id, post_id', 'numerical', 'integerOnly'=>true),
			array('data, cadastrado, atualizado', 'safe'),
			array('data, usuario_id, post_id, cadastrado, atualizado', 'default', 'setOnEmpty' => true, 'value' => null),
			array('comentario_id, texto, data, usuario_id, post_id, cadastrado, atualizado', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'usuario' => array(self::BELONGS_TO, 'Usuario', 'usuario_id'),
			'post' => array(self::BELONGS_TO, 'Post', 'post_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'comentario_id' => Yii::t('app', 'Comentario'),
			'texto' => Yii::t('app', 'Texto'),
			'data' => Yii::t('app', 'Data'),
			'usuario_id' => null,
			'post_id' => null,
			'cadastrado' => Yii::t('app', 'Cadastrado'),
			'atualizado' => Yii::t('app', 'Atualizado'),
			'usuario' => null,
			'post' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('comentario_id', $this->comentario_id);
		$criteria->compare('texto', $this->texto, true);
		$criteria->compare('data', $this->data, true);
		$criteria->compare('usuario_id', $this->usuario_id);
		$criteria->compare('post_id', $this->post_id);
		$criteria->compare('cadastrado', $this->cadastrado, true);
		$criteria->compare('atualizado', $this->atualizado, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}